{
	"info": {
		"_postman_id": "2f6080d8-3dde-45ef-8738-89d679a65c6c",
		"name": "TrelloAPIFinalCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14255838",
		"_collection_link": "https://dark-resonance-793137.postman.co/workspace/Back-End-Automation~aefe3475-2c2a-43d6-b16e-445f241b8338/collection/14255838-2f6080d8-3dde-45ef-8738-89d679a65c6c?action=share&source=collection_link&creator=14255838"
	},
	"item": [
		{
			"name": "Get All Boards",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 30 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function() {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/members/me/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json(); // Parse the response body as JSON\r",
							"\r",
							"pm.test(\"Board name is 'Learning Postman'\", function () {\r",
							"pm.expect(responseData.name).to.eql(\"Learning Postman\"); // Assert the name is as expected\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"boardId\", responseData.id); // Set the board ID as a collection variable\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/1/boards?name=Learning Postman&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards"
					],
					"query": [
						{
							"key": "name",
							"value": "Learning Postman"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json(); \r",
							"\r",
							"pm.test(\"Response body has property 'name' of type string equal to 'Learning Postman'\", function() {\r",
							"    pm.expect(responseData).to.have.property('name'); // Check if the 'name' property exists\r",
							"    pm.expect(responseData.name).to.be.a('string'); // Verify that 'name' is of type string\r",
							"    pm.expect(responseData.name).to.eql(\"Learning Postman\"); // Check if 'name' is equal to \"Learning Postman\"\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TO DO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"    \r",
							"pm.test(\"Response has all the expected properties\", function() {\r",
							"pm.expect(responseData).to.have.all.keys('id', 'name', 'closed', 'color', 'idBoard', 'pos', 'limits');\r",
							"});\r",
							"\r",
							"pm.test(\"'closed' is false and of type boolean\", function() {\r",
							"pm.expect(responseData.closed).to.be.a('boolean');\r",
							"    pm.expect(responseData.closed).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"'idBoard' matches expected board ID\", function() {\r",
							"let expectedBoardId = pm.variables.get(\"boardId\"); // Get the board ID from the current environment or collection variables\r",
							"    pm.expect(responseData.idBoard).to.eql(expectedBoardId); // Compare the response's board ID with the expected one\r",
							"});\r",
							"\r",
							"const listId = responseData.id;\r",
							"pm.collectionVariables.set(\"todoListId\", listId);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?key={{trelloKey}}&token={{trelloToken}}&name=TO DO&idBoard={{boardId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "TO DO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create list with Unique Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json(); // Get the response data\r",
							"\r",
							"pm.test(\"List name matches the unique name used in creation\", function() {\r",
							"    let expectedName = pm.variables.get(\"uniqueListName\"); // Retrieve the saved unique name\r",
							"    pm.expect(responseData.name).to.eql(expectedName); // Assert the names match\r",
							"});\r",
							"\r",
							"var uniqueListId = responseData.id;\r",
							"pm.collectionVariables.set(\"uniqueListId\",uniqueListId);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a unique name for the list using a random number:\r",
							"//Option 1\r",
							"var uniqueName = \"List-\" + Math.floor(Math.random() * 100000); // Example: \"List-12345\"\r",
							"\r",
							"//Option 2\r",
							"//var uniqueName = \"List-\" + new Date().getTime();\r",
							"\r",
							"// Set this unique name as a variable\r",
							"pm.collectionVariables.set(\"uniqueListName\", uniqueName);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?key={{trelloKey}}&token={{trelloToken}}&name={{uniqueListName}}&idBoard={{boardId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "{{uniqueListName}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Lists from a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response array is not empty', function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    const responseArray = pm.response.json();\r",
							"    pm.expect(responseArray).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('List with a specific name is present', function () {\r",
							"    const listNames = pm.response.json().map(list => list.name);\r",
							"    pm.expect(listNames).to.include(pm.variables.get('uniqueListName'));\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}/lists?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Card in TO DO List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"const cardId = responseData.id;\r",
							"pm.collectionVariables.set(\"cardId\", cardId);\r",
							"\r",
							"pm.test(\"Card name is correct\", function() {\r",
							"    pm.expect(responseData.name).to.equal(\"Sign-up for Trello\");\r",
							"});\r",
							"\r",
							"pm.test(\"Labels and attachments are empty\", function() {\r",
							"    pm.expect(responseData.labels).to.be.empty;\r",
							"    pm.expect(responseData.attachments).to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1//cards?key={{trelloKey}}&token={{trelloToken}}&name=Sign-up for Trello&idList={{todoListId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "Sign-up for Trello"
						},
						{
							"key": "idList",
							"value": "{{todoListId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move Card to List with Unique Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"    \r",
							"pm.test(\"Card ID is correct\", function() {\r",
							"pm.expect(responseData.id).to.eql(pm.variables.get(\"cardId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Card is moved to the new list\", function() {\r",
							"    pm.expect(responseData.idList).to.eql(pm.variables.get(\"uniqueListId\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1//cards/{{cardId}}?key={{trelloKey}}&token={{trelloToken}}&idList={{uniqueListId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{uniqueListId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json(); // Parse the response body as JSON\r",
							"    \r",
							"pm.test(\"'limits' property exists and is an object\", function() {\r",
							"pm.expect(responseData).to.have.property('limits'); // Check if the 'limits' property exists\r",
							"    pm.expect(responseData.limits).to.be.an('object'); // Check if 'limits' is an object\r",
							"});\r",
							"\r",
							"pm.test(\"'limits' object is empty\", function() {\r",
							"pm.expect(Object.keys(responseData.limits)).to.have.lengthOf(0); // Check if 'limits' object is empty\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards/{{cardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json(); // Parse the response body as JSON\r",
							"    \r",
							"pm.test(\"Response '_value' is null\", function() {\r",
							"pm.expect(responseData._value).to.be.null; // Assert that '_value' is null\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": null,
							"value": null
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "{{baseURL}}"
		},
		{
			"key": "trelloKey",
			"value": "{{trelloKey}}"
		},
		{
			"key": "trelloToken",
			"value": "{{trelloToken}}"
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "uniqueListName",
			"value": ""
		},
		{
			"key": "todoListId",
			"value": ""
		},
		{
			"key": "uniqueListId",
			"value": ""
		},
		{
			"key": "cardId",
			"value": ""
		}
	]
}